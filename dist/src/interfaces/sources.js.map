{"version":3,"file":"sources.js","sourceRoot":"","sources":["../../../src/interfaces/sources.ts"],"names":[],"mappings":";;;;;;;AAEA,4BA6CC;;;IA5CC,oBAAW;;IACX,wBAAiB;;IACjB,wBAAe;;IACf,+BAAsB;;IACtB,mCAGE;;IACF,yBAAgB;;IAChB,0BAAiB;;IACjB,sBAAgB;;IAChB,0BAAkB;;IAClB,0BAAiC;;IACjC,uBASE;;IACF,0BAUE;;IACF,wBAAsE;;IACtE,sBAOiB;;IACjB,uBAAkB;;;;;AAMpB,kCAGC;;;IAFC,0BAAW;;IACX,qCAAsB;;;;;AAGxB,gCAkBC;;;IAjBC,0BAAc;;IACd,4BAAgB;;IAChB,8BAAkB;;IAClB,0BAAiB;;IACjB,8BAAkC;;IAClC,2BAKE;;IACF,8BAGE;;IACF,2BAAe;;IACf,2BAAmB;;;;;;AAGrB,MAAM,UAAU,YAAY,CAAC,UAAe;IAC1C,OAAO,MAAM,IAAI,UAAU,CAAC;AAC9B,CAAC;;;;AAED,kCAGC;;;IAFC,8BAAgB;;IAChB,6BAAc","sourcesContent":["import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n"]}