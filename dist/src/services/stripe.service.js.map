{"version":3,"file":"stripe.service.js","sourceRoot":"","sources":["../../../src/services/stripe.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAe,MAAM,eAAe,CAAC;AAIhE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,mBAAmB,EAAU,MAAM,sBAAsB,CAAC;AAEnE,OAAO,EACL,sBAAsB,EAEtB,cAAc,EAEf,MAAM,sBAAsB,CAAC;AAqB9B,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAKzD,MAAM,OAAO,aAAa;;;;;;;IAGxB,YAC0C,GAAW,EACnB,OAAgB,EACxC,MAA2B,EAC3B,MAAiB;QAHe,QAAG,GAAH,GAAG,CAAQ;QACnB,YAAO,GAAP,OAAO,CAAS;QACxC,WAAM,GAAN,MAAM,CAAqB;QAC3B,WAAM,GAAN,MAAM,CAAW;QAEzB,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SAC1E;IACH,CAAC;;;;IAEM,kBAAkB;QACvB,OAAO,IAAI,CAAC,MAAM;aACf,QAAQ,EAAE;aACV,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC;aAClD,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,mBAAA,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,EAAO,CAAC,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;;;;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;;;;;;IAEM,MAAM,CAAC,GAAW,EAAE,OAAiB;QAC1C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;;;;;;IAEM,SAAS,CAAC,GAAW,EAAE,OAAiB;QAC7C,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;;;;IAEM,QAAQ,CAAC,OAAyB;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;;;;;;IAEM,WAAW,CAChB,CAA8B,EAC9B,CAA0D;QAE1D,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC;;;;;;IAEM,YAAY,CACjB,CAAuB,EACvB,CAA0B;QAE1B,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC;;;;;IAEM,cAAc,CAAC,MAAoB;QACxC,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;;;;;IAEM,cAAc,CAAC,OAA8B;QAClD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;;;YA5DF,UAAU;;;;yCAKN,MAAM,SAAC,sBAAsB;4CAC7B,MAAM,SAAC,cAAc;YAtCjB,mBAAmB;YADnB,SAAS;;;;;;;IAmChB,+BAAgC;;;;;IAG9B,4BAAmD;;;;;IACnD,gCAAgD;;;;;IAChD,+BAAmC;;;;;IACnC,+BAAyB","sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  private stripe!: StripeInstance;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader\n      .asStream()\n      .filter((status: Status) => status.loaded === true)\n      .map(() => (this.window.getNativeWindow() as any).Stripe);\n  }\n\n  public getInstance() {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(this.loader, this.window, key, options);\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n}\n"]}