{"version":3,"file":"ngx-stripe.js","sources":["../../src/services/window-ref.service.ts","../../src/services/document-ref.service.ts","../../src/services/api-loader.service.ts","../../src/interfaces/stripe.ts","../../src/interfaces/sources.ts","../../src/interfaces/token.ts","../../src/services/stripe-instance.class.ts","../../src/services/stripe.service.ts","../../src/services/stripe-factory.service.ts","../../src/components/stripe-card.component.ts","../../src/modules/ngx-stripe.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  private status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private window: WindowRef,\n    private document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: Status = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData\n} from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\nimport { PaymentRequestOptions } from './payment-request';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  paymentRequest(options: PaymentRequestOptions): any;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import { Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\nexport class StripeInstance implements StripeServiceInterface {\n  private stripe$: BehaviorSubject<StripeJS | undefined> = new BehaviorSubject<\n    StripeJS | undefined\n  >(undefined);\n\n  constructor(\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private key: string,\n    private options?: Options\n  ) {\n    this.loader\n      .asStream()\n      .filter((status: Status) => status.loaded === true)\n      .first()\n      .map(() => (this.window.getNativeWindow() as any).Stripe)\n      .subscribe((Stripe: any) => {\n        const stripe = this.options\n          ? (Stripe(this.key, this.options) as StripeJS)\n          : (Stripe(this.key) as StripeJS);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe$.getValue();\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .map(stripe => (stripe as StripeJS).elements(options))\n      .first();\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isBankAccount(a) && isBankAccountData(b)) {\n          return Observable.fromPromise(stripe.createToken(a, b));\n        } else if (isPii(a) && isPiiData(b)) {\n          return Observable.fromPromise(stripe.createToken(a, b));\n        } else {\n          return Observable.fromPromise(\n            stripe.createToken(a as Element, b as CardDataOptions | undefined)\n          );\n        }\n      })\n      .first();\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isSourceData(a)) {\n          return Observable.fromPromise(stripe.createSource(a as SourceData));\n        }\n        return Observable.fromPromise(stripe.createSource(a as Element, b));\n      })\n      .first();\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return Observable.fromPromise(stripe.retrieveSource(source));\n      })\n      .first();\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    const stripe = this.getInstance();\n    if (stripe) {\n      return stripe.paymentRequest(options);\n    }\n    return undefined;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  private stripe!: StripeInstance;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader\n      .asStream()\n      .filter((status: Status) => status.loaded === true)\n      .map(() => (this.window.getNativeWindow() as any).Stripe);\n  }\n\n  public getInstance() {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(this.loader, this.window, key, options);\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) private baseKey: string,\n    @Inject(STRIPE_OPTIONS) private baseOptions: string,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {}\n\n  public create(key: string, options?: Options): StripeInstance {\n    return new StripeInstance(this.loader, this.window, key, options);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs/';\nimport { Observable } from 'rxjs/';\n\nimport {\n  Element as StripeElement,\n  ElementOptions,\n  ElementEventType\n} from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { StripeInstance } from '../services/stripe-instance.class';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #stripeCard></div>`\n})\nexport class StripeCardComponent implements OnInit {\n  @Output() public card = new EventEmitter<StripeElement>();\n  @Output()\n  public on = new EventEmitter<{ type: ElementEventType; event: any }>();\n\n  @ViewChild('stripeCard') private stripeCard!: ElementRef;\n  private element!: StripeElement;\n  @Input()\n  private set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  private options$ = new BehaviorSubject<ElementOptions>({});\n  @Input()\n  private set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  @Input()\n  private set stripe(stripeIn: StripeInstance) {\n    this.stripe$.next(stripeIn);\n  }\n  private stripe$ = new BehaviorSubject<StripeInstance | null>(null);\n\n  constructor(private stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<Elements> = Observable.combineLatest(\n      this.elementsOptions$.asObservable(),\n      this.stripe$.asObservable()\n    ).switchMap(([options, stripe]) => {\n      if (stripe) {\n        if (Object.keys(options).length > 0) {\n          return stripe.elements(options);\n        }\n        return stripe.elements();\n      } else {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      }\n    });\n    Observable.combineLatest(\n      elements$,\n      this.options$.asObservable().filter(options => Boolean(options))\n    ).subscribe(([elements, options]) => {\n      this.element = elements.create('card', options);\n\n      this.element.on('blur', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'blur'\n        })\n      );\n\n      this.element.on('change', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'change'\n        })\n      );\n\n      this.element.on('click', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'click'\n        })\n      );\n\n      this.element.on('focus', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'focus'\n        })\n      );\n\n      this.element.on('ready', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'ready'\n        })\n      );\n\n      this.element.mount(this.stripeCard.nativeElement);\n\n      this.card.emit(this.element);\n    });\n  }\n\n  public getCard(): StripeElement {\n    return this.element;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\nimport { StripeFactoryService } from '../services/stripe-factory.service';\n\nimport { WindowRef } from '../services/window-ref.service';\nimport { DocumentRef } from '../services/document-ref.service';\n\nimport {\n  Options,\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS\n} from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\nimport 'rxjs/add/observable/combineLatest';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/map';\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["Observable","BehaviorSubject"],"mappings":"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"}